## SQL Queries

Here is the list of my SQL queries along with comments and descriptions:

1. **Count Total Orders:**
   - Query:
     ```sql
     SELECT COUNT(*) AS orders_count
     FROM orders;
     ```
   - Description: Count the total number of orders in the dataset.
   - Comment: This query retrieves the count of all rows in the 'orders' table, giving the total number of orders.

2. **Count Orders by Status:**
   - Query:
     ```sql
     SELECT order_status, COUNT(*) AS orders
     FROM orders
     GROUP BY order_status;
     ```
   - Description: Count orders for each order status category.
   - Comment: This query groups orders by their status and returns the count of orders for each status category.

3. **Products Sold per Year and Category:**
   - Query:
     ```sql
     SELECT YEAR(o.order_purchase_timestamp) AS year_,
         p.product_category_name AS product_category,
         COUNT(*) AS products_sold
     FROM orders o
     JOIN order_items oi ON o.order_id = oi.order_id
     JOIN products p ON oi.product_id = p.product_id
     GROUP BY YEAR(o.order_purchase_timestamp), p.product_category_name
     ORDER BY year_, product_category;
     ```
   - Description: Count products sold per year and category.
   - Comment: This query joins the 'orders', 'order_items', and 'products' tables to count the number of products sold per year and category.

4. **Percentage of Tech Sellers:**
   - Query:
     ```sql
     SELECT Total_sellers_count,
         tech_sellers_count,
         CONCAT(FORMAT((tech_sellers_count / Total_sellers_count) * 100, 2), '%') AS tech_sellers_percentage
     FROM (
         -- Subquery to count tech sellers and total sellers
         SELECT COUNT(DISTINCT s.seller_id) AS Total_sellers_count,
             COUNT(DISTINCT CASE WHEN pe.product_category_name_english IN (...) THEN s.seller_id END) AS tech_sellers_count
         FROM sellers s
         JOIN order_items oi ON s.seller_id = oi.seller_id
         JOIN products p ON oi.product_id = p.product_id
         JOIN product_category_name_translation pe ON p.product_category_name = pe.product_category_name
     ) AS seller_tech_counts;
     ```
   - Description: Calculate the percentage of tech sellers among all sellers.
   - Comment: This query calculates the percentage of tech sellers based on the count of tech sellers and the total number of sellers.

5. **User Growth by Year:**
   - Query:
     ```sql
     SELECT YEAR(order_purchase_timestamp) AS year_,
         COUNT(customer_id) AS customer_count
     FROM orders
     GROUP BY YEAR(order_purchase_timestamp)
     ORDER BY year_ DESC;
     ```
   - Description: Count customer growth per year.
   - Comment: This query groups orders by year and counts the number of unique customers for each year, showing user growth over time.

6. **Total Sales per Year:**
   - Query:
     ```sql
     SELECT YEAR(order_purchase_timestamp) AS year_,
         COUNT(customer_id) AS total_customers,
         COUNT(*) AS total_orders
     FROM orders
     GROUP BY year_
     ORDER BY year_;
     ```
   - Description: Count total customers and orders per year.
   - Comment: This query groups orders by year and calculates the total number of customers and orders for each year.

7. **Average Order Value by Month:**
   - Query:
     ```sql
     SELECT YEAR(order_purchase_timestamp) AS year_,
         MONTH(order_purchase_timestamp) AS month_,
         AVG(payment_value) AS avg_order_value
     FROM orders
     GROUP BY year_, month_
     ORDER BY year_, month_;
     ```
   - Description: Calculate the average order value per month.
   - Comment: This query groups orders by year and month and calculates the average payment value for each month.

8. **Top 10 Customers by Total Spending:**
   - Query:
     ```sql
     SELECT c.customer_id,
         c.customer_unique_id,
         c.customer_city,
         c.customer_state,
         SUM(o.payment_value) AS total_spending
     FROM customers c
     JOIN orders o ON c.customer_id = o.customer_id
     GROUP BY c.customer_id, c.customer_unique_id, c.customer_city, c.customer_state
     ORDER BY total_spending DESC
     LIMIT 10;
     ```
   - Description: Identify the top 10 customers with the highest total spending.
   - Comment: This query joins the 'customers' and 'orders' tables to calculate the total spending for each customer and retrieve the top 10 spenders.

9. **Revenue and Profit Margin by Category:**
   - Query:
     ```sql
     SELECT p.product_category_name AS product_category,
         SUM(oi.price) AS total_revenue,
         SUM(oi.price - oi.product_cost) AS total_profit
     FROM order_items oi
     JOIN products p ON oi.product_id = p.product_id
     GROUP BY p.product_category_name
     ORDER BY total_revenue DESC;
     ```
   - Description: Calculate total revenue and profit margin for each product category.
   - Comment: This query calculates the total revenue and profit margin (revenue - cost) for each product category.

10. **Monthly Revenue and Profit Trend:**
    - Query:
      ```sql
      SELECT YEAR(o.order_purchase_timestamp) AS year_,
          MONTH(o.order_purchase_timestamp) AS month_,
          SUM(oi.price) AS monthly_revenue,
          SUM(oi.price - oi.product_cost) AS monthly_profit
      FROM orders o
      JOIN order_items oi ON o.order_id = oi.order_id
      GROUP BY year_, month_
      ORDER BY year_, month_;
      ```
    - Description: Track the monthly revenue and profit trend.
    - Comment: This query joins the 'orders' and 'order_items' tables to calculate the monthly revenue and profit for each year and month.

11. **Customer Order History:**
    - Query:
      ```sql
      SELECT c.customer_unique_id,
          c.customer_city,
          c.customer_state,
          o.order_id,
          o.order_purchase_timestamp,
          o.order_status,
          SUM(oi.price) AS total_order_amount
      FROM customers c
      JOIN orders o ON c.customer_id = o.customer_id
      JOIN order_items oi ON o.order_id = oi.order_id
      GROUP BY c.customer_unique_id, c.customer_city, c.customer_state, o.order_id, o.order_purchase_timestamp, o.order_status
      ORDER BY c.customer_unique_id, o.order_purchase_timestamp;
      ```
    - Description: Provide a history of orders for each customer.
    - Comment: This query combines information from the 'customers', 'orders', and 'order_items' tables to display the order history for each customer.

12. **Average Delivery Time by Product Category:**
    - Query:
      ```sql
      SELECT p.product_category_name AS product_category,
          AVG(DATEDIFF(o.order_delivered_customer_date, o.order_approved_at)) AS avg_delivery_days
      FROM orders o
      JOIN order_items oi ON o.order_id = oi.order_id
      JOIN products p ON oi.product_id = p.product_id
      WHERE o.order_delivered_customer_date IS NOT NULL
      GROUP BY p.product_category_name;
      ```
    - Description: Calculate the average delivery time for each product category.
    - Comment: This query calculates the average delivery time in days for each product category, excluding orders that haven't been delivered.

13. **Repeat Customers:**
    - Query:
      ```sql
      SELECT c.customer_unique_id,
          COUNT(DISTINCT o.order_id) AS repeat_purchase_count
      FROM customers c
      JOIN orders o ON c.customer_id = o.customer_id
      GROUP BY c.customer_unique_id
      HAVING COUNT(DISTINCT o.order_id) > 1
      ORDER BY repeat_purchase_count DESC;
      ```
    - Description: Identify customers who have made repeat purchases.
    - Comment: This query finds customers who have made more than one purchase and counts the number of repeat purchases for each customer.

14. **Monthly Customer Acquisition:**
    - Query:
      ```sql
      SELECT YEAR(first_order_date) AS year_,
          MONTH(first_order_date) AS month_,
          COUNT(customer_id) AS new_customers
      FROM (
          SELECT customer_id,
              MIN(order_purchase_timestamp) AS first_order_date
          FROM orders
          GROUP BY customer_id
      ) AS first_orders
      GROUP BY year_, month_
      ORDER BY year_, month_;
      ```
    - Description: Track the monthly acquisition of new customers.
    - Comment: This query calculates the number of new customers acquired each month based on their first order date.

15. **Canceled Orders and Percentage:**
    - Query:
      ```sql
      SELECT COUNT(DISTINCT CASE WHEN order_status = 'canceled' THEN order_id END) AS canceled_orders,
          CONCAT(FORMAT((COUNT(DISTINCT CASE WHEN order_status = 'canceled' THEN order_id END) / COUNT(*)) * 100, 2), '%') AS canceled_orders_percentage
      FROM orders;
      ```
    - Description: Count the number and percentage of canceled orders.
    - Comment: This query calculates the count and percentage of orders that were canceled.

16. **Average Review Scores by Product Category:**
    - Query:
      ```sql
      SELECT p.product_category_name AS product_category,
          AVG(review_score) AS avg_review_score
      FROM order_reviews r
      JOIN orders o ON r.order_id = o.order_id
      JOIN order_items oi ON o.order_id = oi.order_id
      JOIN products p ON oi.product_id = p.product_id
      GROUP BY p.product_category_name;
      ```
    - Description: Calculate the average review scores for each product category.
    - Comment: This query calculates the average review score for each product category based on order reviews.

17. **Top 5 Products by Review Score:**
    - Query:
      ```sql
      SELECT p.product_id,
          p.product_category_name AS product_category,
          p.product_title,
          AVG(r.review_score) AS avg_review_score
      FROM products p
      JOIN order_items oi ON p.product_id = oi.product_id
      JOIN order_reviews r ON oi.order_id = r.order_id
      GROUP BY p.product_id, p.product_category_name, p.product_title
      ORDER BY avg_review_score DESC
      LIMIT 5;
      ```
    - Description: Identify the top 5 products with the highest average review scores.
    - Comment: This query joins the 'products', 'order_items', and 'order_reviews' tables to determine the top products based on average review scores.

18. **Average Payment Value by Payment Type:**
    - Query:
      ```sql
      SELECT payment_type,
          AVG(payment_value) AS avg_payment_value
      FROM orders
      GROUP BY payment_type;
      ```
    - Description: Calculate the average payment value for each payment type.
    - Comment: This query calculates the average payment value for different payment types.

19. **Orders with Free Items:**
    - Query:
      ```sql
      SELECT o.order_id,
          o.order_purchase_timestamp,
          COUNT(DISTINCT oi.product_id) AS free_items_count
      FROM orders o
      JOIN order_items oi ON o.order_id = oi.order_id
      WHERE oi.price = 0
      GROUP BY o.order_id, o.order_purchase_timestamp
      ORDER BY free_items_count DESC;
      ```
    - Description: Identify orders containing free items and the count of free items in each order.
    - Comment: This query finds orders with items that have a price of 0 and counts the number of free items in each order.

20. **Average Time to Approve and Deliver Orders:**
    - Query:
      ```sql
      SELECT AVG(DATEDIFF(order_approved_at, order_purchase_timestamp)) AS avg_approval_days,
          AVG(DATEDIFF(order_delivered_carrier_date, order_purchase_timestamp)) AS avg_delivery_days
      FROM orders
      WHERE order_approved_at IS NOT NULL AND order_delivered_carrier_date IS NOT NULL;
      ```
    - Description: Calculate the average time it takes to approve and deliver orders.
    - Comment: This query calculates the average number of days it takes to approve and deliver orders that have been approved and delivered.

21. **Monthly Return Rate:**
    - Query:
      ```sql
      SELECT YEAR(order_purchase_timestamp) AS year_,
          MONTH(order_purchase_timestamp) AS month_,
          COUNT(DISTINCT CASE WHEN order_status = 'delivered' THEN order_id END) AS delivered_orders,
          COUNT(DISTINCT CASE WHEN order_status = 'delivered' AND order_delivered_customer_date > order_estimated_delivery_date THEN order_id END) AS delayed_deliveries
      FROM orders
      GROUP BY year_, month_
      ORDER BY year_, month_;
      ```
    - Description: Calculate the monthly return rate based on delayed deliveries.
    - Comment: This query calculates the monthly return rate by identifying delayed deliveries compared to the estimated delivery date.

22. **Average Price and Review Score by Seller State:**
    - Query:
      ```sql
      SELECT s.seller_state,
          AVG(oi.price) AS avg_price,
          AVG(r.review_score) AS avg_review_score
      FROM sellers s
      JOIN order_items oi ON s.seller_id = oi.seller_id
      JOIN order_reviews r ON oi.order_id = r.order_id
      GROUP BY s.seller_state;
      ```
    - Description: Calculate the average price and review score for each seller state.
    - Comment: This query calculates the average price and review score for products sold by sellers in different states.

23. **Average Price and Review Score by Seller City:**
    - Query:
      ```sql
      SELECT s.seller_city,
          AVG(oi.price) AS avg_price,
          AVG(r.review_score) AS avg_review_score
      FROM sellers s
      JOIN order_items oi ON s.seller_id = oi.seller_id
      JOIN order_reviews r ON oi.order_id = r.order_id
      GROUP BY s.seller_city;
      ```
    - Description: Calculate the average price and review score for each seller city.
    - Comment: This query calculates the average price and review score for products sold by sellers in different cities.

24. **Average Price and Review Score by Product Category:**
    - Query:
      ```sql
      SELECT p.product_category_name AS product_category,
          AVG(oi.price) AS avg_price,
          AVG(r.review_score) AS avg_review_score
      FROM products p
      JOIN order_items oi ON p.product_id = oi.product_id
      JOIN order_reviews r ON oi.order_id = r.order_id
      GROUP BY p.product_category_name;
      ```
    - Description: Calculate the average price and review score for each product category.
    - Comment: This query calculates the average price and review score for products in different categories.

25. **Monthly Sales and Revenue Growth:**
    - Query:
      ```sql
      SELECT YEAR(order_purchase_timestamp) AS year_,
          MONTH(order_purchase_timestamp) AS month_,
          COUNT(DISTINCT order_id) AS monthly_orders,
          SUM(payment_value) AS monthly_revenue
      FROM orders
      GROUP BY year_, month_
      ORDER BY year_, month_;
      ```
    - Description: Track the monthly sales and revenue growth.
    - Comment: This query calculates the number of monthly orders and total revenue for each year and month.

26. **Monthly Customer Churn Rate:**
    - Query:
      ```sql
      SELECT YEAR(order_purchase_timestamp) AS year_,
          MONTH(order_purchase_timestamp) AS month_,
          COUNT(DISTINCT CASE WHEN order_status = 'delivered' THEN customer_id END) AS active_customers,
          COUNT(DISTINCT CASE WHEN order_status = 'canceled' THEN customer_id END) AS churned_customers,
          CONCAT(FORMAT((COUNT(DISTINCT CASE WHEN order_status = 'canceled' THEN customer_id END) / COUNT(DISTINCT CASE WHEN order_status = 'delivered' THEN customer_id END)) * 100, 2), '%') AS churn_rate
      FROM orders
      GROUP BY year_, month_
      ORDER BY year_, month_;
      ```
    - Description: Calculate the monthly customer churn rate.
    - Comment: This query calculates the monthly churn rate by identifying customers who have canceled orders compared to active customers.

27. **Average Delivery Time by Seller State:**
    - Query:
      ```sql
      SELECT s.seller_state,
          AVG(DATEDIFF(o.order_delivered_customer_date, o.order_approved_at)) AS avg_delivery_days
      FROM sellers s
      JOIN order_items oi ON s.seller_id = oi.seller_id
      JOIN orders o ON oi.order_id = o.order_id
      WHERE o.order_delivered_customer_date IS NOT NULL
      GROUP BY s.seller_state;
      ```
    - Description: Calculate the average delivery time for each seller state.
    - Comment: This query calculates the average delivery time in days for products sold by sellers in different states.

28. **Average Delivery Time by Seller City:**
    - Query:
      ```sql
      SELECT s.seller_city,
          AVG(DATEDIFF(o.order_delivered_customer_date, o.order_approved_at)) AS avg_delivery_days
      FROM sellers s
      JOIN order_items oi ON s.seller_id = oi.seller_id
      JOIN orders o ON oi.order_id = o.order_id
      WHERE o.order_delivered_customer_date IS NOT NULL
      GROUP BY s.seller_city;
      ```
    - Description: Calculate the average delivery time for each seller city.
    - Comment: This query calculates the average delivery time in days for products sold by sellers in different cities.

29. **Average Product Price by Seller State:**
    - Query:
      ```sql
      SELECT s.seller_state,
          AVG(oi.price) AS avg_product_price
      FROM sellers s
      JOIN order_items oi ON s.seller_id = oi.seller_id
      GROUP BY s.seller_state;
      ```
    - Description: Calculate the average product price for each seller state.
    - Comment: This query calculates the average product price for products sold by sellers in different states.

30. **Average Product Price by Seller City:**
    - Query:
      ```sql
      SELECT s.seller_city,
          AVG(oi.price) AS avg_product_price
      FROM sellers s
      JOIN order_items oi ON s.seller_id = oi.seller_id
      GROUP BY s.seller_city;
      ```
    - Description: Calculate the average product price for each seller city.
    - Comment: This query calculates the average product price for products sold by sellers in different cities.

31. **Revenue from Top 3 Product Categories:**
    - Query:
      ```sql
      SELECT p.product_category_name,
          SUM(oi.price) AS total_revenue
      FROM order_items oi
      JOIN products p ON oi.product_id = p.product_id
      GROUP BY p.product_category_name
      ORDER BY total_revenue DESC
      LIMIT 3;
      ```
    - Description: Calculate the total revenue from the top 3 product categories.
    - Comment: This query helps identify the highest-grossing product categories.

32. **Average Number of Items Sold per Order:**
    - Query:
      ```sql
      SELECT AVG(item_count) AS avg_items_sold_per_order
      FROM (
          SELECT order_id,
              COUNT(*) AS item_count
          FROM order_items
          GROUP BY order_id
      ) order_item_counts;
      ```
    - Description: Calculate the average number of items sold per order.
    - Comment: This query provides insights into the typical order size.

33. **Customer Segmentation by Order Frequency:**
    - Query:
      ```sql
      SELECT CASE
              WHEN repeat_order_count = 1 THEN 'First-Time Customer'
              WHEN repeat_order_count = 2 THEN 'Repeat Customer'
              ELSE 'Frequent Customer'
          END AS customer_segment,
          COUNT(*) AS customer_count
      FROM (
          SELECT customer_id,
              COUNT(*) AS repeat_order_count
          FROM orders
          GROUP BY customer_id
      ) customer_orders
      GROUP BY customer_segment;
      ```
    - Description: Segment customers based on their order frequency.
    - Comment: This query classifies customers into segments for targeted marketing strategies.

34. **Monthly Average Order Count:**
    - Query:
      ```sql
      SELECT YEAR(order_purchase_timestamp) AS year_,
          MONTH(order_purchase_timestamp) AS month_,
          COUNT(DISTINCT order_id) AS avg_order_count
      FROM orders
      GROUP BY year_, month_
      ORDER BY year_, month_;
      ```
    - Description: Calculate the monthly average order count.
    - Comment: This query helps track the variations in order activity over months.

35. **Revenue Contribution by Payment Type:**
    - Query:
      ```sql
      SELECT p.payment_type,
          SUM(op.payment_value) AS total_payment_amount
      FROM order_payments op
      JOIN payments p ON op.payment_id = p.payment_id
      GROUP BY p.payment_type;
      ```
    - Description: Determine the contribution of each payment type to total revenue.
    - Comment: This query provides insights into preferred payment methods.

36. **Top 5 Sellers and Their Ratings:**
    - Query:
      ```sql
      SELECT s.seller_id,
          s.seller_zip_code_prefix,
          s.seller_city,
          AVG(r.review_score) AS average_review_score
      FROM sellers s
      LEFT JOIN order_items oi ON s.seller_id = oi.seller_id
      LEFT JOIN order_reviews r ON oi.order_id = r.order_id
      GROUP BY s.seller_id, s.seller_zip_code_prefix, s.seller_city
      ORDER BY average_review_score DESC
      LIMIT 5;
      ```
    - Description: Identify the top 5 sellers based on their average review scores.
    - Comment: This query considers seller ratings to determine top performers.

37. **Orders with Multiple Payment Installments:**
    - Query:
      ```sql
      SELECT COUNT(DISTINCT o.order_id) AS multi_installment_order_count
      FROM orders o
      JOIN order_payments op ON o.order_id = op.order_id
      GROUP BY o.order_id
      HAVING COUNT(DISTINCT op.payment_installments) > 1;
      ```
    - Description: Count orders with multiple payment installments.
    - Comment: This query identifies orders where customers choose installment payment.

38. **Product Ratings and Review Count:**
    - Query:
      ```sql
      SELECT p.product_id,
          AVG(r.review_score) AS average_review_score,
          COUNT(DISTINCT r.order_id) AS review_count
      FROM products p
      LEFT JOIN order_items oi ON p.product_id = oi.product_id
      LEFT JOIN order_reviews r ON oi.order_id = r.order_id
      GROUP BY p.product_id;
      ```
    - Description: Calculate the average rating and review count for each product.
    - Comment: This query provides insights into product popularity and customer satisfaction.

39. **Customer Location and Average Payment Value:**
    - Query:
      ```sql
      SELECT c.customer_state,
          AVG(op.payment_value) AS avg_payment_value
      FROM customers c
      JOIN orders o ON c.customer_id = o.customer_id
      JOIN order_payments op ON o.order_id = op.order_id
      GROUP BY c.customer_state;
      ```
    - Description: Calculate the average payment value from customers in different states.
    - Comment: This query helps identify regions with higher payment values.

40. **Monthly Sales Breakdown by Product Category:**
    - Query:
      ```sql
      SELECT p.product_category_name,
          YEAR(oi.order_purchase_timestamp) AS year_,
          MONTH(oi.order_purchase_timestamp) AS month_,
          SUM(oi.price) AS monthly_category_sales
      FROM order_items oi
      JOIN products p ON oi.product_id = p.product_id
      GROUP BY p.product_category_name, year_, month_
      ORDER BY year_, month_, monthly_category_sales DESC;
      ```
    - Description: Break down monthly sales by product category.
    - Comment: This query provides a detailed view of sales trends across categories




